# emacs: -*- mode: python; py-indent-offset: 4; indent-tabs-mode: nil -*-
# vi: set ft=python sts=4 ts=4 sw=4 et:
"""Some basic functions for image construction

"""

import sys as _sys
import numpy as _np
from PyQt4 import QtGui as _qt

from qimageview import qimageview as _qimageview

if _sys.byteorder == 'little':
    _bgra = (0, 1, 2, 3)
else:
    _bgra = (3, 2, 1, 0)

bgra_dtype = _np.dtype({'b': (_np.uint8, _bgra[0], 'blue'),
                        'g': (_np.uint8, _bgra[1], 'green'),
                        'r': (_np.uint8, _bgra[2], 'red'),
                        'a': (_np.uint8, _bgra[3], 'alpha')})

# Define a rainbow colormap
RAINBOW = {0: [0, 0, 0],
           1: [182, 147, 205],
           2: [185, 109, 81],
           3: [156, 87, 38],
           4: [161, 231, 187],
           5: [4, 69, 50],
           6: [209, 13, 113],
           7: [110, 244, 96],
           8: [127, 47, 199],
           9: [127, 77, 122],
           10: [204, 57, 49],
           11: [23, 41, 182],
           12: [155, 1, 125],
           13: [90, 193, 25],
           14: [44, 235, 71],
           15: [54, 246, 122],
           16: [6, 15, 164],
           17: [133, 222, 82],
           18: [22, 188, 214],
           19: [126, 118, 179],
           20: [198, 157, 251],
           21: [188, 133, 21],
           22: [107, 118, 42],
           23: [108, 157, 54],
           24: [114, 144, 142],
           25: [165, 61, 35],
           26: [94, 234, 131],
           27: [3, 62, 239],
           28: [183, 223, 13],
           29: [28, 211, 154],
           30: [240, 5, 103],
           31: [26, 211, 15],
           32: [97, 23, 49],
           33: [12, 165, 109],
           34: [230, 12, 162],
           35: [88, 246, 29],
           36: [157, 70, 248],
           37: [2, 232, 180],
           38: [119, 146, 34],
           39: [119, 69, 166],
           40: [248, 158, 111],
           41: [203, 58, 136],
           42: [117, 76, 214],
           43: [93, 29, 224],
           44: [86, 25, 85],
           45: [164, 222, 51],
           46: [231, 227, 17],
           47: [145, 180, 111],
           48: [121, 231, 98],
           49: [198, 112, 251],
           50: [230, 36, 125],
           51: [164, 203, 141],
           52: [249, 178, 175],
           53: [197, 58, 62],
           54: [252, 92, 24],
           55: [30, 74, 84],
           56: [237, 57, 9],
           57: [142, 215, 225],
           58: [110, 207, 125],
           59: [187, 12, 233],
           60: [245, 105, 109],
           61: [151, 58, 78],
           62: [16, 193, 171],
           63: [90, 157, 205],
           64: [139, 164, 142],
           65: [65, 249, 100],
           66: [3, 126, 141],
           67: [104, 19, 45],
           68: [51, 206, 148],
           69: [237, 132, 96],
           70: [207, 203, 216],
           71: [165, 209, 226],
           72: [69, 63, 244],
           73: [130, 156, 54],
           74: [199, 1, 153],
           75: [90, 107, 242],
           76: [216, 110, 37],
           77: [67, 31, 212],
           78: [62, 179, 98],
           79: [153, 126, 84],
           80: [243, 38, 227],
           81: [212, 113, 166],
           82: [138, 218, 56],
           83: [55, 136, 126],
           84: [117, 130, 43],
           85: [45, 118, 235],
           86: [244, 57, 81],
           87: [120, 218, 91],
           88: [142, 141, 118],
           89: [227, 227, 127],
           90: [80, 228, 112],
           91: [139, 37, 184],
           92: [30, 72, 84],
           93: [121, 250, 243],
           94: [126, 251, 202],
           95: [116, 10, 109],
           96: [222, 17, 158],
           97: [239, 114, 83],
           98: [28, 110, 58],
           99: [1, 222, 84],
           100: [76, 212, 193],
           101: [166, 20, 208],
           102: [32, 139, 45],
           103: [60, 137, 175],
           104: [217, 113, 137],
           105: [162, 129, 150],
           106: [93, 37, 82],
           107: [231, 216, 242],
           108: [233, 71, 20],
           109: [241, 177, 13],
           110: [72, 128, 224],
           111: [189, 85, 104],
           112: [225, 153, 151],
           113: [118, 41, 50],
           114: [196, 240, 37],
           115: [23, 24, 53],
           116: [241, 69, 56],
           117: [193, 112, 21],
           118: [48, 68, 185],
           119: [72, 23, 108],
           120: [144, 208, 83],
           121: [147, 208, 36],
           122: [222, 24, 246],
           123: [28, 5, 15],
           124: [144, 144, 89],
           125: [106, 121, 120],
           126: [84, 119, 29],
           127: [59, 249, 145],
           128: [163, 129, 48],
           129: [116, 94, 245],
           130: [223, 108, 39],
           131: [178, 38, 140],
           132: [150, 81, 32],
           133: [163, 87, 246],
           134: [109, 86, 157],
           135: [146, 50, 241],
           136: [115, 242, 109],
           137: [205, 13, 191],
           138: [235, 24, 99],
           139: [97, 11, 235],
           140: [75, 233, 7],
           141: [135, 232, 109],
           142: [206, 99, 84],
           143: [46, 226, 85],
           144: [130, 198, 162],
           145: [141, 212, 58],
           146: [115, 185, 128],
           147: [147, 211, 77],
           148: [18, 154, 251],
           149: [177, 57, 37],
           150: [75, 26, 107],
           151: [78, 78, 88],
           152: [200, 160, 166],
           153: [58, 220, 160],
           154: [116, 234, 100],
           155: [243, 174, 40],
           156: [132, 173, 248],
           157: [192, 152, 158],
           158: [141, 111, 50],
           159: [37, 87, 9],
           160: [136, 138, 117],
           161: [175, 172, 118],
           162: [16, 106, 197],
           163: [144, 106, 244],
           164: [66, 30, 22],
           165: [224, 198, 13],
           166: [85, 63, 150],
           167: [124, 166, 199],
           168: [234, 38, 237],
           169: [123, 83, 55],
           170: [241, 110, 86],
           171: [156, 230, 153],
           172: [230, 91, 235],
           173: [64, 197, 162],
           174: [20, 162, 153],
           175: [238, 153, 167],
           176: [133, 189, 43],
           177: [194, 202, 203],
           178: [55, 70, 97],
           179: [169, 87, 155],
           180: [232, 107, 68],
           181: [194, 134, 115],
           182: [112, 173, 62],
           183: [200, 14, 73],
           184: [125, 157, 217],
           185: [63, 15, 152],
           186: [166, 192, 215],
           187: [117, 71, 243],
           188: [121, 152, 21],
           189: [224, 21, 142],
           190: [19, 171, 237],
           191: [111, 168, 9],
           192: [30, 100, 78],
           193: [205, 217, 244],
           194: [83, 200, 1],
           195: [15, 35, 100],
           196: [92, 237, 136],
           197: [99, 108, 229],
           198: [107, 239, 69],
           199: [1, 148, 175],
           200: [148, 109, 59],
           201: [20, 80, 75],
           202: [192, 29, 79],
           203: [140, 64, 105],
           204: [65, 60, 98],
           205: [77, 245, 189],
           206: [174, 124, 38],
           207: [170, 245, 194],
           208: [97, 3, 234],
           209: [183, 10, 238],
           210: [29, 189, 220],
           211: [12, 72, 153],
           212: [188, 103, 191],
           213: [93, 50, 157],
           214: [207, 214, 234],
           215: [131, 24, 13],
           216: [158, 92, 2],
           217: [216, 234, 232],
           218: [203, 124, 97],
           219: [23, 11, 112],
           220: [196, 150, 227],
           221: [217, 2, 185],
           #222: [246, 98, 196],
           #223: [201, 115, 234],
           #224: [163, 181, 36],
           #225: [163, 18, 89],
           #226: [142, 25, 160],
           #227: [120, 83, 14],
           #228: [154, 161, 110],
           #229: [147, 209, 25],
           #230: [81, 73, 35],
           #231: [224, 7, 25],
           #232: [201, 126, 251],
           #233: [57, 91, 99],
           #234: [136, 11, 122],
           #235: [62, 59, 136],
           #236: [83, 234, 27],
           #237: [230, 148, 240],
           #238: [115, 114, 1],
           #239: [182, 152, 30],
           #240: [12, 1, 57],
           #241: [10, 25, 127],
           #242: [192, 176, 148],
           #243: [113, 249, 103],
           #244: [126, 31, 246],
           #245: [98, 139, 172],
           #246: [222, 99, 170],
           #247: [22, 155, 46],
           #248: [75, 27, 169],
           #249: [72, 50, 149],
           #250: [167, 14, 234],
           #251: [249, 193, 11],
           #252: [164, 50, 65],
           #253: [144, 93, 187],
           #254: [108, 226, 6],
           #255: [58, 124, 199],
           #256: [33, 109, 45],
           #257: [70, 188, 245],
           #258: [159, 232, 63],
           #259: [227, 45, 12],
           #260: [228, 38, 219],
           #261: [230, 4, 136],
           #262: [68, 225, 202],
           #263: [20, 188, 135],
           #264: [202, 65, 245],
           #265: [106, 162, 76],
           #266: [1, 29, 106],
           #267: [236, 151, 8],
           #268: [179, 188, 179],
           #269: [251, 90, 167],
           #270: [66, 100, 243],
           #271: [124, 248, 108],
           #272: [23, 46, 52],
           #273: [15, 166, 188],
           #274: [84, 223, 45],
           #275: [229, 64, 226],
           #276: [127, 118, 198],
           #277: [75, 170, 5],
           #278: [28, 194, 212],
           #279: [186, 158, 121],
           #280: [137, 76, 60],
           #281: [69, 84, 175],
           #282: [198, 138, 187],
           #283: [38, 171, 103],
           #284: [180, 8, 207],
           #285: [119, 114, 20],
           #286: [127, 243, 39],
           #287: [215, 43, 121],
           #288: [5, 118, 250],
           #289: [212, 31, 205],
           #290: [170, 89, 110],
           #291: [24, 179, 126],
           #292: [217, 158, 70],
           #293: [142, 61, 92],
           #294: [168, 119, 7],
           #295: [58, 137, 129],
           #296: [120, 127, 128],
           #297: [220, 106, 230],
           #298: [124, 131, 95],
           #299: [239, 103, 77],
           #300: [146, 71, 198],
           #301: [243, 78, 101],
           #302: [153, 250, 142],
           #303: [78, 17, 27],
           #304: [233, 246, 77],
           #305: [141, 123, 205],
           #306: [85, 56, 239],
           #307: [193, 166, 29],
           #308: [103, 10, 245],
           #309: [186, 143, 161],
           #310: [150, 178, 7],
           #311: [49, 170, 248],
           #312: [73, 228, 95],
           #313: [62, 52, 26],
           #314: [39, 150, 70],
           #315: [110, 229, 13],
           #316: [143, 142, 114],
           #317: [150, 17, 81],
           #318: [104, 119, 75],
           #319: [58, 55, 55],
           #320: [189, 209, 165],
           #321: [237, 95, 246],
           #322: [108, 216, 243],
           #323: [79, 125, 227],
           #324: [115, 163, 64],
           #325: [8, 40, 133],
           #326: [98, 78, 63],
           #327: [70, 234, 207],
           #328: [251, 102, 151],
           #329: [194, 83, 105],
           #330: [126, 59, 3],
           #331: [57, 119, 69],
           #332: [160, 210, 195],
           #333: [93, 177, 43],
           #334: [67, 23, 151],
           #335: [106, 235, 68],
           #336: [155, 59, 189],
           #337: [220, 127, 227],
           #338: [117, 231, 204],
           #339: [52, 76, 42],
           #340: [91, 127, 111],
           #341: [113, 164, 31],
           #342: [74, 220, 65],
           #343: [171, 12, 240],
           #344: [222, 75, 234],
           #345: [109, 15, 99],
           #346: [45, 247, 109],
           #347: [166, 68, 32],
           #348: [57, 198, 235],
           #349: [229, 230, 141],
           #350: [171, 216, 194],
           #351: [253, 59, 193],
           #352: [250, 134, 220],
           #353: [95, 100, 60],
           #354: [197, 28, 108],
           #355: [35, 84, 216],
           #356: [129, 128, 192],
           #357: [221, 58, 48],
           #358: [42, 166, 151],
           #359: [89, 193, 27],
           #360: [251, 14, 44],
           #361: [162, 154, 37],
           #362: [80, 131, 19],
           #363: [25, 193, 58],
           #364: [242, 153, 175],
           #365: [96, 250, 71],
           #366: [124, 16, 81],
           #367: [44, 144, 17],
           #368: [207, 8, 216],
           #369: [122, 35, 117],
           #370: [120, 32, 135],
           #371: [59, 200, 181],
           #372: [105, 15, 131],
           #373: [58, 188, 22],
           #374: [113, 70, 187],
           #375: [8, 26, 149],
           #376: [141, 67, 180],
           #377: [111, 89, 195],
           #378: [86, 60, 153],
           #379: [167, 210, 98],
           #380: [253, 200, 61],
           #381: [191, 111, 224],
           #382: [76, 100, 142],
           #383: [27, 135, 241],
           #384: [102, 131, 229],
           #385: [2, 251, 242],
           #386: [17, 89, 246],
           #387: [183, 9, 79],
           #388: [24, 82, 122],
           #389: [166, 165, 36],
           #390: [60, 73, 50],
           #391: [206, 241, 5],
           #392: [250, 167, 179],
           #393: [202, 126, 235],
           #394: [130, 85, 76],
           #395: [136, 157, 12],
           #396: [235, 18, 19],
           #397: [198, 176, 251],
           #398: [98, 99, 142],
           #399: [142, 253, 75],
           #400: [30, 174, 123],
           #401: [174, 161, 8],
           #402: [174, 145, 34],
           #403: [57, 149, 119],
           #404: [205, 76, 40],
           #405: [103, 6, 12],
           #406: [93, 82, 226],
           #407: [134, 138, 140],
           #408: [55, 66, 205],
           #409: [173, 17, 143],
           #410: [10, 121, 88],
           #411: [10, 253, 223],
           #412: [111, 51, 227],
           #413: [247, 114, 68],
           #414: [120, 11, 1],
           #415: [182, 193, 170],
           #416: [242, 230, 4],
           #417: [69, 176, 243],
           #418: [203, 217, 20],
           #419: [132, 80, 75],
           #420: [139, 23, 228],
           #421: [93, 117, 46],
           #422: [5, 151, 1],
           #423: [79, 16, 37],
           #424: [37, 105, 176],
           #425: [134, 47, 171],
           #426: [155, 122, 214],
           #427: [93, 5, 62],
           #428: [71, 35, 86],
           #429: [150, 80, 164],
           #430: [27, 35, 125],
           #431: [95, 35, 160],
           #432: [184, 136, 168],
           #433: [159, 20, 190],
           #434: [140, 29, 142],
           #435: [66, 64, 202],
           #436: [247, 80, 66],
           #437: [230, 69, 4],
           #438: [205, 99, 60],
           #439: [68, 140, 17],
           #440: [106, 142, 7],
           #441: [191, 216, 35],
           #442: [66, 244, 136],
           #443: [81, 81, 103],
           #444: [1, 130, 71],
           #445: [29, 31, 237],
           #446: [46, 178, 174],
           #447: [44, 120, 21],
           #448: [70, 182, 251],
           #449: [102, 96, 8],
           #450: [112, 3, 173],
           #451: [19, 128, 153],
           #452: [23, 248, 171],
           #453: [203, 181, 203],
           #454: [39, 37, 210],
           #455: [247, 233, 121],
           #456: [149, 179, 56],
           #457: [145, 188, 156],
           #458: [114, 243, 16],
           #459: [11, 171, 213],
           #460: [243, 1, 180],
           #461: [32, 35, 38],
           #462: [60, 197, 168],
           #463: [147, 47, 245],
           #464: [41, 245, 142],
           #465: [66, 95, 102],
           #466: [175, 192, 167],
           #467: [228, 188, 83],
           #468: [84, 173, 25],
           #469: [215, 127, 194],
           #470: [136, 180, 1],
           #471: [243, 96, 29],
           #472: [39, 47, 181],
           #473: [159, 253, 58],
           #474: [47, 185, 156],
           #475: [126, 74, 164],
           #476: [8, 97, 170],
           #477: [180, 87, 178],
           #478: [247, 214, 111],
           #479: [248, 159, 102],
           #480: [168, 58, 120],
           #481: [14, 124, 164],
           #482: [87, 8, 241],
           #483: [12, 53, 57],
           #484: [60, 96, 230],
           #485: [88, 201, 156],
           #486: [98, 18, 111],
           #487: [192, 185, 239],
           #488: [41, 83, 10],
           #489: [44, 77, 117],
           #490: [5, 210, 78],
           #491: [66, 175, 217],
           #492: [8, 64, 197],
           #493: [38, 246, 61],
           #494: [246, 226, 239],
           #495: [132, 239, 87],
           #496: [162, 155, 123],
           #497: [23, 249, 87],
           #498: [69, 23, 82],
           #499: [229, 78, 176],
           #500: [83, 146, 152],
           #501: [37, 105, 82],
           #502: [246, 220, 149],
           #503: [19, 153, 115],
           #504: [118, 45, 107],
           #505: [239, 72, 138],
           #506: [210, 61, 115],
           #507: [31, 144, 51],
           #508: [71, 74, 243],
           #509: [134, 219, 41],
           #510: [55, 90, 37],
           #511: [110, 226, 64],
           #512: [182, 54, 226],
           #513: [139, 43, 139],
           #514: [140, 225, 76],
           #515: [58, 103, 18],
           #516: [211, 167, 110],
           #517: [21, 110, 107],
           #518: [167, 203, 222],
           #519: [63, 38, 88],
           #520: [29, 238, 34],
           #521: [185, 222, 160],
           #522: [71, 78, 6],
           #523: [207, 225, 160],
           #524: [92, 218, 6],
           #525: [167, 144, 210],
           #526: [124, 216, 11],
           #527: [231, 75, 63],
           #528: [107, 43, 214],
           #529: [138, 150, 167],
           #530: [171, 126, 233],
           #531: [82, 151, 41],
           #532: [139, 131, 155],
           #533: [144, 244, 26],
           #534: [209, 57, 53],
           #535: [151, 144, 57],
           #536: [15, 47, 167],
           #537: [14, 218, 90],
           #538: [239, 43, 60],
           #539: [82, 185, 159],
           #540: [231, 204, 76],
           #541: [116, 226, 115],
           #542: [55, 104, 146],
           #543: [51, 223, 157],
           #544: [86, 219, 51],
           #545: [38, 115, 184],
           #546: [34, 153, 152],
           #547: [176, 214, 224],
           #548: [214, 196, 184],
           #549: [182, 205, 102],
           #550: [168, 16, 71],
           #551: [15, 171, 76],
           #552: [126, 41, 127],
           #553: [84, 223, 77],
           #554: [114, 94, 65],
           #555: [67, 191, 73],
           #556: [136, 29, 161],
           #557: [223, 17, 42],
           #558: [226, 205, 92],
           #559: [106, 198, 1],
           #560: [84, 152, 144],
           #561: [119, 245, 59],
           #562: [242, 37, 55],
           #563: [54, 65, 98],
           #564: [26, 122, 86],
           #565: [182, 4, 209],
           #566: [34, 251, 43],
           #567: [248, 124, 94],
           #568: [23, 134, 47],
           #569: [37, 87, 111],
           #570: [72, 188, 23],
           #571: [150, 165, 49],
           #572: [141, 78, 109],
           #573: [189, 217, 141],
           #574: [29, 235, 217],
           #575: [78, 12, 194],
           #576: [71, 162, 87],
           #577: [16, 101, 117],
           #578: [157, 21, 31],
           #579: [139, 181, 80],
           #580: [220, 83, 152],
           #581: [5, 7, 64],
           #582: [251, 202, 243],
           #583: [62, 225, 152],
           #584: [244, 131, 55],
           #585: [136, 66, 37],
           #586: [64, 92, 150],
           #587: [30, 106, 195],
           #588: [60, 134, 208],
           #589: [175, 219, 105],
           #590: [91, 243, 45],
           #591: [161, 54, 231],
           #592: [8, 206, 88],
           #593: [54, 96, 136],
           #594: [47, 172, 251],
           #595: [225, 18, 98],
           #596: [143, 34, 2],
           #597: [243, 232, 82],
           #598: [63, 37, 27],
           #599: [86, 132, 53],
           #600: [127, 241, 19],
           #601: [83, 249, 246],
           #602: [45, 64, 194],
           #603: [224, 101, 74],
           #604: [109, 147, 202],
           #605: [93, 222, 185],
           #606: [29, 105, 238],
           #607: [149, 165, 251],
           #608: [215, 134, 87],
           #609: [56, 135, 166],
           #610: [130, 164, 122],
           #611: [133, 175, 56],
           #612: [142, 7, 185],
           #613: [48, 140, 2],
           #614: [232, 215, 251],
           #615: [14, 187, 190],
           #616: [42, 107, 119],
           #617: [48, 104, 140],
           #618: [53, 218, 132],
           #619: [180, 137, 180],
           #620: [121, 233, 57],
           #621: [248, 78, 237],
           #622: [142, 59, 176],
           #623: [141, 108, 179],
           #624: [89, 40, 98],
           #625: [137, 161, 233],
           #626: [219, 224, 153],
           #627: [31, 93, 221],
           #628: [60, 234, 28],
           #629: [54, 110, 73],
           #630: [109, 10, 10],
           #631: [217, 7, 106],
           #632: [58, 236, 133],
           #633: [206, 66, 59],
           #634: [93, 184, 167],
           #635: [236, 231, 58],
           #636: [205, 13, 204],
           #637: [216, 128, 72],
           #638: [159, 58, 206],
           #639: [60, 205, 214],
           #640: [152, 190, 67],
           #641: [6, 17, 85],
           #642: [103, 252, 212],
           #643: [160, 132, 95],
           #644: [201, 146, 207],
           #645: [177, 219, 184],
           #646: [47, 94, 224],
           #647: [4, 169, 45],
           #648: [37, 93, 229],
           #649: [82, 16, 51],
           #650: [95, 232, 57],
           #651: [125, 111, 41],
           #652: [165, 83, 88],
           #653: [161, 159, 141],
           #654: [74, 207, 103],
           #655: [30, 190, 72],
           #656: [87, 83, 108],
           #657: [236, 95, 212],
           #658: [84, 159, 70],
           #659: [142, 26, 120],
           #660: [51, 73, 52],
           #661: [110, 243, 53],
           #662: [102, 194, 193],
           #663: [31, 198, 126],
           #664: [187, 151, 151],
           #665: [249, 73, 245],
           #666: [126, 159, 240],
           #667: [167, 199, 112],
           #668: [47, 234, 86],
           #669: [236, 247, 156],
           #670: [179, 3, 166],
           #671: [189, 95, 25],
           #672: [204, 193, 55],
           #673: [114, 202, 87],
           #674: [38, 42, 190],
           #675: [234, 51, 95],
           #676: [55, 118, 88],
           #677: [186, 231, 14],
           #678: [219, 76, 2],
           #679: [71, 124, 152],
           #680: [93, 96, 135],
           #681: [2, 23, 86],
           #682: [60, 228, 177],
           #683: [96, 11, 248],
           #684: [39, 87, 73],
           #685: [120, 95, 173],
           #686: [167, 177, 125],
           #687: [69, 103, 9],
           #688: [143, 149, 81],
           #689: [9, 95, 111],
           #690: [106, 135, 79],
           #691: [80, 54, 35],
           #692: [84, 83, 56],
           #693: [155, 82, 230],
           #694: [186, 39, 95],
           #695: [72, 9, 182],
           #696: [135, 87, 95],
           #697: [202, 148, 248],
           #698: [235, 209, 173],
           #699: [184, 94, 43],
           #700: [153, 191, 48],
           #701: [155, 167, 47],
           #702: [157, 115, 113],
           #703: [4, 155, 176],
           #704: [128, 200, 186],
           #705: [99, 126, 151],
           #706: [165, 91, 81],
           #707: [50, 93, 150],
           #708: [162, 77, 222],
           #709: [148, 67, 80],
           #710: [197, 194, 148],
           #711: [152, 118, 220],
           #712: [252, 40, 111],
           #713: [92, 32, 7],
           #714: [108, 179, 121],
           #715: [33, 26, 51],
           #716: [158, 41, 9],
           #717: [41, 183, 250],
           #718: [182, 40, 199],
           #719: [134, 138, 240],
           #720: [216, 43, 236],
           #721: [138, 74, 10],
           #722: [137, 86, 35],
           #723: [49, 169, 203],
           #724: [193, 20, 31],
           #725: [56, 14, 221],
           #726: [48, 213, 249],
           #727: [26, 82, 93],
           #728: [117, 34, 70],
           #729: [90, 123, 106],
           #730: [101, 217, 123],
           #731: [15, 190, 113],
           #732: [140, 121, 226],
           #733: [16, 105, 58],
           #734: [66, 64, 220],
           #735: [97, 66, 239],
           #736: [214, 198, 212],
           #737: [38, 17, 201],
           #738: [161, 156, 165],
           #739: [159, 91, 218],
           #740: [247, 161, 113],
           #741: [96, 113, 225],
           #742: [110, 134, 91],
           #743: [45, 98, 192],
           #744: [130, 55, 229],
           #745: [107, 89, 147],
           #746: [123, 249, 68],
           #747: [16, 136, 247],
           #748: [214, 10, 125],
           #749: [21, 122, 52],
           #750: [223, 140, 245],
           #751: [238, 244, 182],
           #752: [32, 134, 40],
           #753: [74, 220, 207],
           #754: [115, 92, 65],
           #755: [162, 25, 120],
           #756: [12, 212, 242],
           #757: [246, 126, 181],
           #758: [130, 213, 191],
           #759: [109, 203, 212],
           #760: [62, 98, 145],
           #761: [175, 156, 170],
           #762: [116, 226, 225],
           #763: [204, 66, 141],
           #764: [105, 229, 200],
           #765: [223, 251, 91],
           #766: [52, 188, 132],
           #767: [57, 137, 215],
           #768: [103, 15, 217],
           #769: [24, 6, 184],
           #770: [244, 39, 58],
           #771: [57, 170, 31],
           #772: [245, 38, 111],
           #773: [200, 31, 249],
           #774: [66, 84, 101],
           #775: [30, 124, 110],
           #776: [216, 80, 111],
           #777: [122, 208, 229],
           #778: [60, 73, 116],
           #779: [150, 245, 246],
           #780: [214, 61, 232],
           #781: [202, 64, 129],
           #782: [64, 172, 227],
           #783: [172, 156, 127],
           #784: [147, 225, 60],
           #785: [36, 141, 60],
           #786: [53, 232, 43],
           #787: [229, 248, 90],
           #788: [74, 230, 147],
           #789: [243, 242, 99],
           #790: [15, 177, 237],
           #791: [117, 175, 168],
           #792: [56, 78, 134],
           #793: [232, 2, 118],
           #794: [252, 139, 31],
           #795: [71, 247, 178],
           #796: [192, 60, 49],
           #797: [237, 180, 192],
           #798: [72, 230, 246],
           #799: [87, 131, 44],
           #800: [126, 18, 16],
           #801: [194, 182, 16],
           #802: [75, 64, 64],
           #803: [192, 113, 222],
           #804: [204, 247, 213],
           #805: [44, 88, 116],
           #806: [199, 51, 243],
           #807: [51, 150, 178],
           #808: [151, 181, 161],
           #809: [76, 231, 109],
           #810: [6, 120, 223],
           #811: [108, 227, 78],
           #812: [163, 150, 240],
           #813: [104, 153, 134],
           #814: [238, 102, 22],
           #815: [86, 34, 213],
           #816: [19, 220, 204],
           #817: [187, 40, 119],
           #818: [26, 146, 78],
           #819: [62, 35, 187],
           #820: [66, 78, 206],
           #821: [16, 79, 75],
           #822: [131, 67, 201],
           #823: [35, 121, 27],
           #824: [121, 162, 170],
           #825: [2, 33, 57],
           #826: [103, 70, 82],
           #827: [9, 30, 96],
           #828: [247, 45, 36],
           #829: [148, 128, 240],
           #830: [80, 176, 45],
           #831: [51, 111, 68],
           #832: [123, 84, 124],
           #833: [149, 152, 167],
           #834: [189, 157, 52],
           #835: [212, 83, 30],
           #836: [28, 78, 10],
           #837: [16, 11, 2],
           #838: [77, 219, 98],
           #839: [248, 176, 25],
           #840: [40, 120, 188],
           #841: [84, 189, 127],
           #842: [30, 35, 36],
           #843: [233, 110, 137],
           #844: [154, 90, 67],
           #845: [12, 32, 50],
           #846: [86, 146, 250],
           #847: [234, 226, 119],
           #848: [40, 234, 109],
           #849: [131, 185, 251],
           #850: [149, 185, 53],
           #851: [47, 53, 249],
           #852: [99, 125, 233],
           #853: [39, 174, 154],
           #854: [185, 104, 10],
           #855: [192, 76, 31],
           #856: [206, 15, 53],
           #857: [94, 104, 21],
           #858: [77, 134, 124],
           #859: [148, 194, 15],
           #860: [223, 250, 241],
           #861: [166, 101, 146],
           #862: [10, 29, 132],
           #863: [175, 229, 22],
           #864: [216, 3, 147],
           #865: [231, 87, 160],
           #866: [24, 217, 219],
           #867: [155, 17, 119],
           #868: [146, 223, 18],
           #869: [203, 1, 115],
           #870: [22, 81, 229],
           #871: [19, 150, 244],
           #872: [155, 193, 137],
           #873: [147, 224, 180],
           #874: [135, 141, 167],
           #875: [88, 240, 164],
           #876: [59, 45, 189],
           #877: [127, 189, 36],
           #878: [26, 185, 56],
           #879: [84, 97, 163],
           #880: [89, 100, 173],
           #881: [150, 11, 205],
           #882: [46, 70, 238],
           #883: [19, 20, 222],
           #884: [126, 199, 179],
           #885: [207, 238, 42],
           #886: [54, 114, 208],
           #887: [164, 219, 44],
           #888: [153, 200, 43],
           #889: [117, 15, 217],
           #890: [104, 204, 79],
           #891: [107, 134, 50],
           #892: [9, 123, 136],
           #893: [128, 216, 226],
           #894: [219, 227, 80],
           #895: [88, 216, 59],
           #896: [213, 160, 177],
           #897: [26, 150, 216],
           #898: [142, 253, 213],
           #899: [44, 140, 184],
           #900: [242, 91, 94],
           #901: [223, 179, 144],
           #902: [211, 135, 77],
           #903: [97, 128, 16],
           #904: [71, 76, 179],
           #905: [194, 10, 103],
           #906: [40, 19, 192],
           #907: [132, 190, 143],
           #908: [113, 21, 29],
           #909: [8, 93, 143],
           #910: [33, 35, 219],
           #911: [80, 234, 27],
           #912: [178, 100, 113],
           #913: [15, 103, 182],
           #914: [11, 238, 12],
           #915: [89, 44, 122],
           #916: [26, 36, 141],
           #917: [1, 128, 37],
           #918: [13, 158, 174],
           #919: [67, 9, 150],
           #920: [20, 55, 75],
           #921: [50, 181, 77],
           #922: [148, 73, 249],
           #923: [34, 195, 5],
           #924: [73, 36, 219],
           #925: [31, 183, 189],
           #926: [249, 239, 195],
           #927: [40, 145, 9],
           #928: [24, 248, 18],
           #929: [158, 219, 180],
           #930: [87, 156, 135],
           #931: [215, 144, 88],
           #932: [61, 23, 188],
           #933: [212, 169, 178],
           #934: [187, 55, 217],
           #935: [144, 251, 15],
           #936: [93, 189, 213],
           #937: [54, 208, 211],
           #938: [73, 39, 190],
           #939: [228, 56, 214],
           #940: [180, 127, 29],
           #941: [33, 41, 12],
           #942: [113, 213, 27],
           #943: [114, 2, 7],
           #944: [46, 136, 22],
           #945: [24, 7, 90],
           #946: [46, 18, 219],
           #947: [51, 63, 242],
           #948: [94, 120, 183],
           #949: [180, 154, 126],
           #950: [213, 168, 85],
           #951: [96, 93, 56],
           #952: [198, 237, 237],
           #953: [152, 37, 139],
           #954: [193, 13, 79],
           #955: [67, 138, 137],
           #956: [105, 207, 142],
           #957: [80, 132, 13],
           #958: [86, 232, 251],
           #959: [131, 69, 174],
           #960: [127, 209, 211],
           #961: [180, 40, 86],
           #962: [215, 107, 246],
           #963: [132, 48, 69],
           #964: [245, 175, 38],
           #965: [110, 220, 100],
           #966: [186, 158, 17],
           #967: [44, 117, 152],
           #968: [60, 101, 73],
           #969: [100, 241, 200],
           #970: [241, 192, 126],
           #971: [67, 47, 143],
           #972: [62, 226, 112],
           #973: [110, 81, 57],
           #974: [86, 149, 134],
           #975: [25, 181, 253],
           #976: [205, 228, 96],
           #977: [233, 102, 31],
           #978: [133, 63, 209],
           #979: [229, 112, 221],
           #980: [212, 47, 220],
           #981: [14, 207, 183],
           #982: [171, 153, 231],
           #983: [152, 42, 77],
           #984: [35, 142, 192],
           #985: [19, 214, 141],
           #986: [139, 89, 183],
           #987: [102, 96, 13],
           #988: [112, 55, 136],
           #989: [168, 94, 79],
           #990: [208, 59, 13],
           #991: [115, 45, 240],
           #992: [210, 92, 77],
           #993: [48, 148, 151],
           #994: [83, 148, 36],
           #995: [76, 136, 99],
           #996: [153, 97, 134],
           #997: [142, 111, 108],
           #998: [242, 187, 93],
           #999: [214, 175, 177],
           #1000: [112, 20, 165],
           }

def gray(array, alpha):
    """
    Return a rgba array which color ranges from black to white.
    
    """
    h, w = array.shape
    new_array = _np.zeros((h, w, 4), dtype=_np.uint8)
    array[array<=0] = 0
    array[array>255] = 255
    new_array[..., 0] = array
    new_array[..., 1] = array
    new_array[..., 2] = array
    new_array[..., 3] = alpha * array.clip(0,1)
    
    return new_array

def red2yellow(array, alpha):
    """
    Return a rgba array which color ranges from red to yellow.
    
    """
    h, w = array.shape
    new_array = _np.zeros((h, w, 4), dtype=_np.uint8)
    array[array<=0] = 0
    array[array>255] = 255
    new_array[..., 0] = 255 * array.clip(0, 1)
    new_array[..., 1] = array
    new_array[..., 2] = 0
    new_array[..., 3] = alpha * array.clip(0, 1)
    
    return new_array

def blue2cyanblue(array, alpha):
    """
    Return a rgba array which color ranges from blue to cyanblue.
    
    """
    h, w = array.shape
    new_array = _np.zeros((h, w, 4), dtype=_np.uint8)
    array[array<=0] = 0
    array[array>255] = 255
    new_array[..., 0] = 0
    new_array[..., 1] = array
    new_array[..., 2] = 255 * array.clip(0, 1)
    new_array[..., 3] = alpha * array.clip(0, 1)

    return new_array

def red(array, alpha):
    """
    Return a whole red rgba array.
    
    """
    h, w = array.shape
    new_array = _np.zeros((h, w, 4), dtype=_np.uint8)
    new_array[..., 0] = 255 * array.clip(0, 1)
    new_array[..., 1] = 0
    new_array[..., 2] = 0
    new_array[..., 3] = alpha * array.clip(0, 1)
    
    return new_array

def green(array, alpha):
    """
    Return a whole green rgba array.
    
    """
    h, w = array.shape
    new_array = _np.zeros((h, w, 4), dtype=_np.uint8)
    new_array[..., 0] = 0
    new_array[..., 1] = 255 * array.clip(0, 1)
    new_array[..., 2] = 0
    new_array[..., 3] = alpha * array.clip(0, 1)

    return new_array

def blue(array, alpha):
    """
    Return a whole blue rgba array.
    
    """
    h, w = array.shape
    new_array = _np.zeros((h, w, 4), dtype=_np.uint8)
    new_array[..., 0] = 0
    new_array[..., 1] = 0
    new_array[..., 2] = 255 * array.clip(0, 1)
    new_array[..., 3] = alpha * array.clip(0, 1)
    
    return new_array

def single_roi(array, alpha, roi):
    """
    Return a single roi view array.

    """
    color = (70, 70, 70)
    h, w = array.shape
    new_array = _np.zeros((h, w, 4), dtype=_np.uint8)
    if roi is None or roi == 0:
        return new_array
    mask = array == roi
    new_array[mask, 0] = color[0]
    new_array[mask, 1] = color[1]
    new_array[mask, 2] = color[2]
    new_array[mask, 3] = alpha 
    return new_array

def _normalize255(array, normalize, scale_length=255.0):
    if not normalize:
        return array

    if normalize is True:
        normalize = array.min(), array.max()
    elif _np.isscalar(normalize):
        normalize = (0, normalize)
    elif isinstance(normalize, tuple) and (normalize[0] == normalize[1]):
        normalize = array.min(), array.max()
    nmin, nmax = normalize

    if nmin:
        array = array - nmin

    scale =  scale_length / (nmax - nmin)
    if scale != 1.0:
        array = array * scale

    return _np.round(array)

def gray2qimage(array, normalize=False):
    """Convert a 2D numpy array 'array' into a 8-bit, indexed QImage with
    a specific colormap. The first dimension represents the vertical image
    axis.

    The parameter 'normalize' can be used to normalize an image's value range
    to 0 ~ 255:

        normalize = (nmin, nmax):
         scale & clip image values from nmin..nmax to 0..255

        normalize = nmax:
         lets nmin default to zero, i.e. scale & clip the range 0..nmax to
         0..255

        normalize = True:
         scale image values to 0..255 (same as passing (array.min(), 
         array.max()))

    If the source array 'array' contains masked values, the result will have 
    only 255 shades of gray, and one color map entry will be used to make the
    corresponding pixels transparent.


    """
    if _np.ndim(array) != 2:
        raise ValueError("gray2qimage can only convert 2D arrays")

    h, w = array.shape
    result = _qt.QImage(w, h, _qt.QImage.Format_Indexed8)

    array = _normalize255(array, normalize)

    for i in range(256):
        result.setColor(i, _qt.qRgb(i, i, i))

    _qimageview(result)[:] = array.clip(0, 255)

    return result

def byte_view(qimage, byteorder = 'little'):
    raw = _qimageview(qimage)
    result = raw.view(_np.uint8).reshape(raw.shape + (-1, ))
    if byteorder and byteorder != _sys.byteorder:
        result = result[...,::-1]
    return result

def rgb_view(qimage, byteorder='big'):
    if byteorder is None:
        byteorder = _sys.byteorder
    bytes = byte_view(qimage, byteorder)
    if bytes.shape[2] != 4:
        raise ValueError, "For rgb_view, the image must have 32 bit pixel" + \
                " size (use RGB32, ARGB32, or ARGB32_Premultiplied)"

    if byteorder == 'little':
        return bytes[..., :3]
    else:
        return bytes[..., 1:]

def alpha_view(qimage):
    bytes = byte_view(qimage, byteorder = None)
    if bytes.shape[2] != 4:
        raise ValueError, "For alpha_view, the image must have 32 bit pixel" + \
                        " size (use RGB32, ARGB32, or ARGB32_Premultiplied)"
    return bytes[..., _bgra[3]]

def idx2rgb(value, colormap, normalize):
    """
    Convert a index to a RGB value based on the colormap.

    """
    if colormap != 'rainbow':
        if normalize[0] == normalize[1]:
            new_value = 0
        else:
            scale = 255. / (normalize[1] - normalize[0])
            new_value = value - normalize[0]
            new_value = int(new_value * scale)
            if new_value < 0:
                new_value = 0
            elif new_value > 255:
                new_value = 255

        if colormap == 'gray':
            return _qt.QColor(new_value, new_value, new_value)
        elif colormap == 'red2yelloe':
            return _qt.QColor(255, new_value, 0)
        elif colormap == 'blue2cyanblue':
            return _qt.QColor(0, new_value, 255)
        elif colormap == 'red':
            return _qt.QColor(255, 0, 0)
        elif colromap == 'green':
            return _qt.QColor(0, 255, 0)
        elif colormap == 'blue':
            return _qt.QColor(0, 0, 255)
    else:
        color = RAINBOW[value]
        return _qt.QColor(color[0], color[1], color[2])

def array2qrgba(array, alpha, colormap, normalize=False, roi=None):
    """Convert a 2D-array into a 3D-array containing rgba value."""
    if _np.ndim(array) != 2:
        raise ValueError("array2qrgb can only convert 2D array")

    if isinstance(colormap, str):
        if colormap != 'rainbow':
            if colormap != 'single ROI':
                array = _normalize255(array, normalize)
                if colormap == 'gray':
                    new_array = gray(array, alpha)
                elif colormap == 'red2yellow':
                    new_array = red2yellow(array, alpha)
                elif colormap == 'blue2cyanblue':
                    new_array = blue2cyanblue(array, alpha)
                elif colormap == 'red':
                    new_array = red(array, alpha)
                elif colormap == 'green':
                    new_array = green(array, alpha)
                elif colormap == 'blue':
                    new_array = blue(array, alpha)
            else:
                new_array = single_roi(array, alpha, roi)
        else:
            if _np.isscalar(normalize):
                new_array = array.clip(0, array.max())
                new_array[array < 0] = 0
                new_array[array > normalize] = 0
            elif isinstance(normalize, tuple):
                new_array = array.clip(0, array.max())
                new_array[array < normalize[0]] = 0
                new_array[array > normalize[1]] = 0
            else:
                new_array = array.clip(0, array.max())
                new_array[array < 0] = 0
            #values = RAINBOW.keys()
            h, w = new_array.shape
            R, G, B = 41, 61, 83
            fst_norm = 100000.0
            new_array_raw = _normalize255(new_array, normalize, scale_length=fst_norm)
            #print 'hahahhaha', new_array_raw.max(), new_array_raw.min()
            new_array_R = _normalize255(new_array_raw % R, (0, R), scale_length=254.0)
            new_array_G = _normalize255(new_array_raw % G, (0, G), scale_length=254.0)
            new_array_B = _normalize255(new_array_raw % B, (0, B), scale_length=254.0)
            new_array2 = _np.zeros((h, w, 4), dtype=_np.uint8)
            #for item in values:
            #    new_array2[new_array==item] = [RAINBOW[item][0],
            #                                   RAINBOW[item][1],
            #                                   RAINBOW[item][2], 
            #                                   0]
            add_ = new_array.clip(0, 1)
            new_array2[..., 0] = new_array_R + add_ 
            new_array2[..., 1] = new_array_G + add_
            new_array2[..., 2] = new_array_B + add_
            new_array2[..., 3] = alpha * _np.sum(new_array2, 2).clip(0, 1)
            #_np.set_printoptions(threshold=1000000)
            #print new_array2
            new_array = new_array2
    else:
        if _np.isscalar(normalize):
            new_array = array.clip(0, array.max())
            new_array[array < 0] = 0
            new_array[array > normalize] = 0
        elif isinstance(normalize, tuple):
            new_array = array.clip(0, array.max())
            new_array[array < normalize[0]] = 0
            new_array[array > normalize[1]] = 0
        else:
            new_array = array.clip(0, array.max())
            new_array[array < 0] = 0
        values = colormap.keys()
        values = [int(item) for item in values]
        h, w = new_array.shape
        new_array2 = _np.zeros((h, w, 4), dtype=_np.uint8)
        for item in values:
            new_array2[new_array==item] = [colormap[item][0],
                                           colormap[item][1],
                                           colormap[item][2],
                                           0]
        new_array2[..., 3] = alpha * _np.sum(new_array2, 2).clip(0, 1)
        new_array = new_array2

    return new_array

def qcomposition(array_list):
    """Composite several qrgba arrays into one."""
    if not len(array_list):
        raise ValueError('Input array list cannot be empty.')
    if _np.ndim(array_list[0]) != 3:
        raise ValueError('RGBA array must be 3D.')

    h, w, channel = array_list[0].shape
    result = _np.array(array_list[0][..., :3], dtype=_np.int64)
    for index in range(1, len(array_list)):
        item = _np.array(array_list[index], dtype=_np.int64)
        alpha_array = _np.tile(item[..., -1].reshape((-1, 1)), (1, 1, 3))
        alpha_array = alpha_array.reshape((h, w, 3))
        result = item[..., :3] * alpha_array + result * \
                (255 - alpha_array)
        result = result / 255
    result = _np.array(result, dtype=_np.uint8)
    return result

def composition(dest, source):
    """Save result in place
    
    Note
    ----
    The dest is a rgb image, while the source is a rgba image
    """
    alpha = source[...,3].reshape(source.shape[0], source.shape[1], 1).astype(_np.float)
    alpha /= 255
    source_rgb = source[...,:3].astype(_np.float)
    dest[:] = _np.uint8(source_rgb * alpha + dest.astype(_np.float) * (1 - alpha))
    return dest

def qrgba2qimage(array):
    """Convert the input array into a image."""
    if _np.ndim(array) != 3:
        raise ValueError("RGBA array must be 3D.")

    h, w, channel = array.shape
    fmt = _qt.QImage.Format_ARGB32
    result = _qt.QImage(w, h, fmt)
    rgb_view(result)[:] = array[..., :3]
    alpha = alpha_view(result)
    alpha[:] = 255
    return result

def null_image(h, w):
    """return a whole black rgba array"""
    new_array = _np.zeros((h, w, 4), dtype=_np.uint8)
    new_array[..., 3] = 255
    return new_array
